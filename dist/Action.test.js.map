{"version":3,"sources":["../dist-es6/Action.test.js"],"names":["describe","it","done","actionExecution","actionType","args","a","b","func","startDate","endDate","actionStore","successStore","subscribe","successAction","returnData","error","execAction","then","action","Error","errorStore","actionError","message","catch","e"],"mappings":";;AAAA;;AACA;;AACAA,SAAS,QAAT,EAAmB,YAAM;AACrBC,OAAG,KAAH,EAAU,UAACC,IAAD,EAAU;AAChB,YAAMC,kBAAkB,2BAAoB;AACxCC,wBAAY,KAD4B;AAExCC,kBAAM,EAAEC,GAAG,CAAL,EAAQC,GAAG,CAAX,EAFkC;AAGxCC,kBAAM,cAACH,IAAD;AAAA,uBAAUA,KAAKC,CAAL,GAASD,KAAKE,CAAxB;AAAA;AAHkC,SAApB,CAAxB;AAKA,2BAAGJ,gBAAgBM,SAAnB,EAA8B,mBAA9B;AACA,8BAAMN,gBAAgBO,OAAtB,EAA+B,8BAA/B;AACA,YAAMC,cAAc,wBAApB;AACAA,oBAAYC,YAAZ,CAAyBC,SAAzB,CAAmCV,gBAAgBC,UAAnD,EAA+D,UAACU,aAAD,EAAmB;AAC9E,kCAAMA,cAAcC,UAApB,EAAgC,CAAhC,EAAmC,+BAAnC;AACA,+BAAGD,cAAcV,UAAjB,EAA6B,oBAA7B;AACA,+BAAGU,cAAcT,IAAjB,EAAuB,cAAvB;AACA,+BAAGS,cAAcJ,OAAjB,EAA0B,iBAA1B;AACA,+BAAGI,cAAcL,SAAjB,EAA4B,mBAA5B;AACA,+BAAGK,cAAcN,IAAjB,EAAuB,cAAvB;AACA,kCAAMM,cAAcE,KAApB,EAA2B,WAA3B;AACAd;AACH,SATD;AAUAS,oBAAYM,UAAZ,CAAuBd,eAAvB,EACKe,IADL,CACU;AAAA,mBAAc,sBAAMH,UAAN,EAAkB,CAAlB,EAAqB,+BAArB,CAAd;AAAA,SADV;AAEH,KArBD;AAsBAd,OAAG,YAAH,EAAiB,UAACC,IAAD,EAAU;AACvB,YAAMc,QAAQ,gBAAd;AACA,YAAMG,SAAS,2BAAoB;AAC/Bf,wBAAY,YADmB;AAE/BC,kBAAM,EAAEC,GAAG,CAAL,EAAQC,GAAG,CAAX,EAFyB;AAG/BC,kBAAM,cAACH,IAAD,EAAU;AAAE,sBAAMe,MAAMJ,KAAN,CAAN;AAAqB;AAHR,SAApB,CAAf;AAKA,2BAAGG,OAAOV,SAAV,EAAqB,mBAArB;AACA,8BAAMU,OAAOT,OAAb,EAAsB,8BAAtB;AACA,YAAMC,cAAc,wBAApB;AACAA,oBAAYU,UAAZ,CAAuBR,SAAvB,CAAiCM,OAAOf,UAAxC,EAAoD,uBAAe;AAC/D,+BAAGkB,YAAYlB,UAAf,EAA2B,oBAA3B;AACA,+BAAGkB,YAAYjB,IAAf,EAAqB,cAArB;AACA,+BAAGiB,YAAYZ,OAAf,EAAwB,iBAAxB;AACA,+BAAGY,YAAYb,SAAf,EAA0B,mBAA1B;AACA,+BAAGa,YAAYd,IAAf,EAAqB,cAArB;AACA,kCAAMc,YAAYN,KAAZ,CAAkBO,OAAxB,EAAiCP,KAAjC,EAAwC,qBAAxC;AACAd;AACH,SARD;AASAS,oBAAYM,UAAZ,CAAuBE,MAAvB,EAA+BK,KAA/B,CAAqC,UAACC,CAAD,EAAO;AACxC,kCAAMA,EAAEF,OAAR,EAAiBP,KAAjB;AACH,SAFD;AAGH,KAtBD;AAuBH,CA9CD;AA+CA","file":"Action.test.js","sourcesContent":["import { equal, notOk, ok } from 'ptz-assert';\nimport { ActionExecution, ActionStore } from './index';\ndescribe('Action', () => {\n    it('Sum', (done) => {\n        const actionExecution = new ActionExecution({\n            actionType: 'SUM',\n            args: { a: 1, b: 2 },\n            func: (args) => args.a + args.b\n        });\n        ok(actionExecution.startDate, 'startDate not set');\n        notOk(actionExecution.endDate, 'endDate set before execution');\n        const actionStore = new ActionStore();\n        actionStore.successStore.subscribe(actionExecution.actionType, (successAction) => {\n            equal(successAction.returnData, 3, 'execAction Return wrong value');\n            ok(successAction.actionType, 'actionType not set');\n            ok(successAction.args, 'args not set');\n            ok(successAction.endDate, 'endDate not set');\n            ok(successAction.startDate, 'startDate not set');\n            ok(successAction.func, 'func not set');\n            notOk(successAction.error, 'has error');\n            done();\n        });\n        actionStore.execAction(actionExecution)\n            .then(returnData => equal(returnData, 3, 'execAction Return wrong value'));\n    });\n    it('Error func', (done) => {\n        const error = 'expected error';\n        const action = new ActionExecution({\n            actionType: 'ERROR_FUNC',\n            args: { a: 1, b: 2 },\n            func: (args) => { throw Error(error); }\n        });\n        ok(action.startDate, 'startDate not set');\n        notOk(action.endDate, 'endDate set before execution');\n        const actionStore = new ActionStore();\n        actionStore.errorStore.subscribe(action.actionType, actionError => {\n            ok(actionError.actionType, 'actionType not set');\n            ok(actionError.args, 'args not set');\n            ok(actionError.endDate, 'endDate not set');\n            ok(actionError.startDate, 'startDate not set');\n            ok(actionError.func, 'func not set');\n            equal(actionError.error.message, error, 'Different error msg');\n            done();\n        });\n        actionStore.execAction(action).catch((e) => {\n            equal(e.message, error);\n        });\n    });\n});\n//# sourceMappingURL=Action.test.js.map"]}